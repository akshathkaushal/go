// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoOperationsClient is the client API for DoOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoOperationsClient interface {
	Add(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*UserData, error)
	Get(ctx context.Context, in *GetUser, opts ...grpc.CallOption) (*UserData, error)
}

type doOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewDoOperationsClient(cc grpc.ClientConnInterface) DoOperationsClient {
	return &doOperationsClient{cc}
}

func (c *doOperationsClient) Add(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*UserData, error) {
	out := new(UserData)
	err := c.cc.Invoke(ctx, "/test.DoOperations/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doOperationsClient) Get(ctx context.Context, in *GetUser, opts ...grpc.CallOption) (*UserData, error) {
	out := new(UserData)
	err := c.cc.Invoke(ctx, "/test.DoOperations/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoOperationsServer is the server API for DoOperations service.
// All implementations must embed UnimplementedDoOperationsServer
// for forward compatibility
type DoOperationsServer interface {
	Add(context.Context, *UserData) (*UserData, error)
	Get(context.Context, *GetUser) (*UserData, error)
	mustEmbedUnimplementedDoOperationsServer()
}

// UnimplementedDoOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedDoOperationsServer struct {
}

func (UnimplementedDoOperationsServer) Add(context.Context, *UserData) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDoOperationsServer) Get(context.Context, *GetUser) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDoOperationsServer) mustEmbedUnimplementedDoOperationsServer() {}

// UnsafeDoOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoOperationsServer will
// result in compilation errors.
type UnsafeDoOperationsServer interface {
	mustEmbedUnimplementedDoOperationsServer()
}

func RegisterDoOperationsServer(s grpc.ServiceRegistrar, srv DoOperationsServer) {
	s.RegisterService(&DoOperations_ServiceDesc, srv)
}

func _DoOperations_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoOperationsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.DoOperations/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoOperationsServer).Add(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoOperations_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoOperationsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.DoOperations/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoOperationsServer).Get(ctx, req.(*GetUser))
	}
	return interceptor(ctx, in, info, handler)
}

// DoOperations_ServiceDesc is the grpc.ServiceDesc for DoOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.DoOperations",
	HandlerType: (*DoOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DoOperations_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DoOperations_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
